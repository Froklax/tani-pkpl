# Generated by Django 5.1.7 on 2025-03-17 18:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nama', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Nama hanya boleh diisi oleh huruf, angka, dan karakter titik (.), underscore (_), atau strip (-)', regex='^[a-zA-Z0-9._-]+$')])),
                ('password', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(8, message='Password minimal 8 karakter.'), django.core.validators.RegexValidator(message='Password harus diisi huruf, angka, dan karakter spesial.', regex='^(?=.*[A-Za-z])(?=.*\\d)(?=.*[!@#$%^&*()_+{}\\[\\]:;<>,.?/~\\-]).+$')])),
                ('tanggal_lahir', models.DateField(help_text='Masukkan tanggal lahir')),
                ('nomor_hp', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Nomor HP harus dimulai dengan kode negara 62 diikuti 6 sampai 13 digit angka tanpa simbol apapun', regex='^62\\d{6,13}$')])),
                ('email', models.EmailField(max_length=255, validators=[django.core.validators.EmailValidator(message='Masukkan format email yang valid.')])),
                ('url_blog', models.URLField(max_length=255, validators=[django.core.validators.URLValidator(message='Masukkan URL yang valid.')])),
                ('deskripsi_diri', models.TextField(validators=[django.core.validators.MinLengthValidator(5, message='Deskripsi minimal 5 karakter'), django.core.validators.MaxLengthValidator(1000, message='Deskripsi maksimal 1000 karakter')])),
                ('npwp', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='NPWP harus dengan format XX.XXX.XXX.X-XXX.XXX dimana X adalah angka.', regex='^\\d{2}\\.\\d{3}\\.\\d{3}\\.\\d{1}-\\d{3}\\.\\d{3}$')])),
                ('status_sertifikasi', models.CharField(choices=[('Belum', 'Belum'), ('Sedang', 'Sedang'), ('Diterima', 'Diterima'), ('Ditolak', 'Ditolak')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_users', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_users', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
